openapi: 3.0.2
info:
  title: Notes API
  description: Notes API description.
  version: "v1.0.0"
servers:
  - url: https://notes.sp/api
    description: Development server
components:
  responses:
    Unauthorized:
      description: Unauthorized
    Forbidden:
      description: Access denied
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    NoContent:
      description: responds with no contents
  parameters:
    NoteId:
      name: nid
      in: path
      description: Note ID
      required: true
      schema:
        type: integer
  examples: {}
  requestBodies:
    SignUp:
      description: SignUp request
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              name:
                type: string
              password:
                type: string
                format: password
    SignIn:
      description: SignIn request
      content:
        application/json:
          schema:
            type: object
            properties:
              identity:
                type: string
              credential:
                type: string
                format: password
    ScheduleForm:
      description: add schedule entry
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
              start:
                type: string
                format: date-time
              finish:
                type: string
                format: date-time
    BookAppointment:
      description: Book Appointment
      content:
        application/json:
          schema:
            type: object
            properties:
              serviceId:
                type: integer
                format: uint
              masterId:
                type: integer
                format: uint
              startTime:
                type: string
                format: date-time

  headers: {}
  securitySchemes:
    Authorization:
      type: apiKey
      in: header
      name: Authorization
    ApiKey:
      type: apiKey
      in: header
      name: X-Api-Key
  links: {}
  callbacks: {}
  schemas:
    Note:
      type: object
      properties:
        id:
          type: integer
          format: uint
        companyId:
          type: integer
          format: uint
        name:
          type: string
        price:
          type: number
          format: float
        duration:
          type: string
          format: time
        status:
          type: string
        gender:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: uint
        path:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        email:
          type: string
          format: email
        name:
          type: string
        status:
          type: string
    Company:
      type: object
      properties:
        id:
          type: integer
          format: uint
        owner:
          $ref: '#/components/schemas/User'
        name:
          type: string
        address:
          type: string
        currency:
          type: string
        logo:
          $ref: '#/components/schemas/File'
        status:
          type: string
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        masters:
          type: array
          items:
            $ref: '#/components/schemas/Master'
        managers:
          type: array
          items:
            $ref: '#/components/schemas/User'
        openHours:
          $ref: '#/components/schemas/OpenHoursItem'
paths:
  /sign-up:
    post:
      summary: Sign Up
      operationId: SignUp
      security:
        - ApiKey: []
      requestBody:
        $ref: '#/components/requestBodies/SignUp'
      responses:
        200:
          description: responds with User object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'

  /sign-in:
    post:
      summary: Sing In.
      operationId: signIn
      security:
        - ApiKey: []
      requestBody:
        $ref: '#/components/requestBodies/SignIn'
      responses:
        200:
          description: Responds with auth token
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
        403:
          $ref: '#/components/responses/Forbidden'

  /user:
    get:
      summary: current User info
      operationId: getUser
      security:
        - ApiKey: []
        - Authorization: []
      responses:
        200:
          description: user info
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'

        403:
          $ref: '#/components/responses/Forbidden'

  /notes:
    post:
      summary: Create a service
      operationId: addService
      security:
        - ApiKey: []
        - Authorization: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        201:
          description: Responds with the created Service object
          headers:
            Location:
              description: URI of the created Service
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Service'
        403:
          $ref: '#/components/responses/Forbidden'

  /services/{sid}:
    parameters:
      - $ref: '#/components/parameters/ServiceId'
    get:
      summary: Get Service object
      operationId: GetService
      security:
        - ApiKey: []
        - Authorization: []
      responses:
        200:
          description: Responds with the Service object
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Service'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/Forbidden'
    put:
      summary: Update the Service
      operationId: updateService
      security:
        - ApiKey: []
        - Authorization: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        200:
          description: responds with the Service ovject
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Service'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/Forbidden'
    delete:
      summary: Delete the Service
      operationId: deleteService
      security:
        - ApiKey: []
        - Authorization: []
      responses:
        204:
          $ref: '#/components/responses/NoContent'
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/Forbidden'

